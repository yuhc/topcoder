#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class ExplodingRobots {
public:
	string canExplode(int x1, int y1, int x2, int y2, string instructions) {
		int m = instructions.length();
		int max_x1 = x1, min_x1 = x1, max_y1 = y1, min_y1 = y1;
		int max_x2 = x2, min_x2 = x2, max_y2 = y2, min_y2 = y2;
		for (int i = 0; i < m; i++) {
			switch (instructions[i]) {
				case 'L':
					min_x1--;
					min_x2--;
					break;
			    case 'R':
			    	max_x1++;
			    	max_x2++;
			    	break;
			    case 'U':
			    	max_y1++;
			    	max_y2++;
			    	break;
			    case 'D':
			    	min_y1--;
			    	min_y2--; 
			    	break;
			    default:
			    	break;
			}		
		}
		
		
		if (min_x2 > max_x1 || max_x2 < min_x1 || min_y2 > max_y1 || max_y2 < min_y1)
			return "Safe";
		else
			return "Explosion";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, string p4, bool hasAnswer, string p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << "\"" << p4 << "\"";
	cout << "]" << endl;
	ExplodingRobots *obj;
	string answer;
	obj = new ExplodingRobots();
	clock_t startTime = clock();
	answer = obj->canExplode(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p5 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	string p4;
	string p5;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 0;
	p2 = 2;
	p3 = 0;
	p4 = "L";
	p5 = "Explosion";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 0;
	p2 = 2;
	p3 = 0;
	p4 = "U";
	p5 = "Safe";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 0;
	p2 = 2;
	p3 = 0;
	p4 = "UL";
	p5 = "Explosion";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 3;
	p1 = 3;
	p2 = 5;
	p3 = 5;
	p4 = "LURLL";
	p5 = "Safe";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 10;
	p1 = 5;
	p2 = -9;
	p3 = -10;
	p4 = "LULULULLLUULRULULULULULULLULULLULD";
	p5 = "Explosion";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
